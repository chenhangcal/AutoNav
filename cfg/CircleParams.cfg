#! /usr/bin/env python

PACKAGE='AutoNav'
import roslib; roslib.load_manifest(PACKAGE)

#from driver_base.msg import SensorLevels
from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()


#       Name                         Type      Reconfiguration lvl    Description                                                   Default             Min     Max

gen.add("radius", double_t, 0, "Radius of circle", 0.8, 0.4, 3.0)
gen.add("angRes", int_t, 0, "Angular resolution", 5, 1, 45)
gen.add("latVel", double_t, 0, "Desired laterval velocity", 0.12, 0.08, 2.5)
gen.add("angVel", double_t, 0, "Desired angular velocity", 8.6, 0.1, 4.5)

gen.add("Kat_p", double_t, 0, "PID control parameter", 0.4, 0.01, 2)
gen.add("Kat_d", double_t, 0, "PID control parameter", 0, 0.01, 2)
gen.add("Kat_i", double_t, 0, "PID control parameter", 0, 0.01, 2)
gen.add("Kct_p", double_t, 0, "PID control parameter", 0.4, 0.01, 2)
gen.add("Kct_d", double_t, 0, "PID control parameter", 0.4, 0.01, 2)
gen.add("Kct_i", double_t, 0, "PID control parameter", 0, 0.01, 2)
gen.add("angular_p", double_t, 0, "PID control parameter", 0.4, 0.01, 2.5)
gen.add("angular_d", double_t, 0, "PID control parameter", 0, 0.01, 1)
gen.add("angular_i", double_t, 0, "PID control parameter", 0, 0.01, 1)

#dir_enum = gen.enum([gen.const("Anti-clockwise",int_t,1,"Left to right"),gen.const("Clockwise",int_t,2,"Right to left")],"An enum to set direction")

gen.add("direction",int_t,0,"Direction of yaw(Anti=-1)",-1,-1,1)

exit(gen.generate(PACKAGE, "Config", "CircleParams"))


