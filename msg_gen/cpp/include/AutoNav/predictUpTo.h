/* Auto-generated by genmsg_cpp for file /home/dev/ros/stacks/AutoNav/msg/predictUpTo.msg */
#ifndef AUTONAV_MESSAGE_PREDICTUPTO_H
#define AUTONAV_MESSAGE_PREDICTUPTO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Twist.h"

namespace AutoNav
{
template <class ContainerAllocator>
struct predictUpTo_ {
  typedef predictUpTo_<ContainerAllocator> Type;

  predictUpTo_()
  : timestamp(0)
  , seq_rpy(0)
  , seq_xyz(0)
  , controlInfo()
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , vx(0.0)
  , vy(0.0)
  , altd(0.0)
  {
  }

  predictUpTo_(const ContainerAllocator& _alloc)
  : timestamp(0)
  , seq_rpy(0)
  , seq_xyz(0)
  , controlInfo(_alloc)
  , roll(0.0)
  , pitch(0.0)
  , yaw(0.0)
  , vx(0.0)
  , vy(0.0)
  , altd(0.0)
  {
  }

  typedef int32_t _timestamp_type;
  int32_t timestamp;

  typedef uint32_t _seq_rpy_type;
  uint32_t seq_rpy;

  typedef uint32_t _seq_xyz_type;
  uint32_t seq_xyz;

  typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _controlInfo_type;
   ::geometry_msgs::Twist_<ContainerAllocator>  controlInfo;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _yaw_type;
  float yaw;

  typedef float _vx_type;
  float vx;

  typedef float _vy_type;
  float vy;

  typedef float _altd_type;
  float altd;


  typedef boost::shared_ptr< ::AutoNav::predictUpTo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AutoNav::predictUpTo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct predictUpTo
typedef  ::AutoNav::predictUpTo_<std::allocator<void> > predictUpTo;

typedef boost::shared_ptr< ::AutoNav::predictUpTo> predictUpToPtr;
typedef boost::shared_ptr< ::AutoNav::predictUpTo const> predictUpToConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::AutoNav::predictUpTo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::AutoNav::predictUpTo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace AutoNav

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::AutoNav::predictUpTo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::AutoNav::predictUpTo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::AutoNav::predictUpTo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "dd021969d994e39ff43a715cb3a3d6ed";
  }

  static const char* value(const  ::AutoNav::predictUpTo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdd021969d994e39fULL;
  static const uint64_t static_value2 = 0xf43a715cb3a3d6edULL;
};

template<class ContainerAllocator>
struct DataType< ::AutoNav::predictUpTo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "AutoNav/predictUpTo";
  }

  static const char* value(const  ::AutoNav::predictUpTo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::AutoNav::predictUpTo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 timestamp\n\
uint32 seq_rpy\n\
uint32 seq_xyz\n\
\n\
geometry_msgs/Twist controlInfo\n\
\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
\n\
float32 vx\n\
float32 vy\n\
float32 altd\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::AutoNav::predictUpTo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::AutoNav::predictUpTo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::AutoNav::predictUpTo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.seq_rpy);
    stream.next(m.seq_xyz);
    stream.next(m.controlInfo);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.yaw);
    stream.next(m.vx);
    stream.next(m.vy);
    stream.next(m.altd);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct predictUpTo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AutoNav::predictUpTo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::AutoNav::predictUpTo_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "seq_rpy: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq_rpy);
    s << indent << "seq_xyz: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq_xyz);
    s << indent << "controlInfo: ";
s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.controlInfo);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "altd: ";
    Printer<float>::stream(s, indent + "  ", v.altd);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAV_MESSAGE_PREDICTUPTO_H

