/* Auto-generated by genmsg_cpp for file /home/dev/ros/stacks/AutoNav/msg/eulerpose.msg */
#ifndef AUTONAV_MESSAGE_EULERPOSE_H
#define AUTONAV_MESSAGE_EULERPOSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Vector3.h"
#include "geometry_msgs/Vector3.h"

namespace AutoNav
{
template <class ContainerAllocator>
struct eulerpose_ {
  typedef eulerpose_<ContainerAllocator> Type;

  eulerpose_()
  : position()
  , euler()
  {
  }

  eulerpose_(const ContainerAllocator& _alloc)
  : position(_alloc)
  , euler(_alloc)
  {
  }

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  position;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _euler_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  euler;


  typedef boost::shared_ptr< ::AutoNav::eulerpose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AutoNav::eulerpose_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct eulerpose
typedef  ::AutoNav::eulerpose_<std::allocator<void> > eulerpose;

typedef boost::shared_ptr< ::AutoNav::eulerpose> eulerposePtr;
typedef boost::shared_ptr< ::AutoNav::eulerpose const> eulerposeConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::AutoNav::eulerpose_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::AutoNav::eulerpose_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace AutoNav

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::AutoNav::eulerpose_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::AutoNav::eulerpose_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::AutoNav::eulerpose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "49488e00b80848fd7fea61173d6d3db2";
  }

  static const char* value(const  ::AutoNav::eulerpose_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x49488e00b80848fdULL;
  static const uint64_t static_value2 = 0x7fea61173d6d3db2ULL;
};

template<class ContainerAllocator>
struct DataType< ::AutoNav::eulerpose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "AutoNav/eulerpose";
  }

  static const char* value(const  ::AutoNav::eulerpose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::AutoNav::eulerpose_<ContainerAllocator> > {
  static const char* value() 
  {
    return "geometry_msgs/Vector3 position\n\
\n\
geometry_msgs/Vector3 euler\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::AutoNav::eulerpose_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::AutoNav::eulerpose_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::AutoNav::eulerpose_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.position);
    stream.next(m.euler);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct eulerpose_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AutoNav::eulerpose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::AutoNav::eulerpose_<ContainerAllocator> & v) 
  {
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "euler: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.euler);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAV_MESSAGE_EULERPOSE_H

