/* Auto-generated by genmsg_cpp for file /home/dev/ros/stacks/AutoNav/msg/obs_IMU_RPY.msg */
#ifndef AUTONAV_MESSAGE_OBS_IMU_RPY_H
#define AUTONAV_MESSAGE_OBS_IMU_RPY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace AutoNav
{
template <class ContainerAllocator>
struct obs_IMU_RPY_ {
  typedef obs_IMU_RPY_<ContainerAllocator> Type;

  obs_IMU_RPY_()
  : timestamp(0)
  , seq(0)
  , roll(0.0)
  , pitch(0.0)
  , baselineY_IMU(0.0)
  , baselineY_Filter(0.0)
  , navYaw(0.0)
  , observedYaw(0.0)
  , roll_pre(0.0)
  , pitch_pre(0.0)
  , yaw_pre(0.0)
  , dyaw_pre(0.0)
  , roll_post(0.0)
  , pitch_post(0.0)
  , yaw_post(0.0)
  , dyaw_post(0.0)
  {
  }

  obs_IMU_RPY_(const ContainerAllocator& _alloc)
  : timestamp(0)
  , seq(0)
  , roll(0.0)
  , pitch(0.0)
  , baselineY_IMU(0.0)
  , baselineY_Filter(0.0)
  , navYaw(0.0)
  , observedYaw(0.0)
  , roll_pre(0.0)
  , pitch_pre(0.0)
  , yaw_pre(0.0)
  , dyaw_pre(0.0)
  , roll_post(0.0)
  , pitch_post(0.0)
  , yaw_post(0.0)
  , dyaw_post(0.0)
  {
  }

  typedef int32_t _timestamp_type;
  int32_t timestamp;

  typedef uint32_t _seq_type;
  uint32_t seq;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _baselineY_IMU_type;
  float baselineY_IMU;

  typedef float _baselineY_Filter_type;
  float baselineY_Filter;

  typedef float _navYaw_type;
  float navYaw;

  typedef float _observedYaw_type;
  float observedYaw;

  typedef float _roll_pre_type;
  float roll_pre;

  typedef float _pitch_pre_type;
  float pitch_pre;

  typedef float _yaw_pre_type;
  float yaw_pre;

  typedef float _dyaw_pre_type;
  float dyaw_pre;

  typedef float _roll_post_type;
  float roll_post;

  typedef float _pitch_post_type;
  float pitch_post;

  typedef float _yaw_post_type;
  float yaw_post;

  typedef float _dyaw_post_type;
  float dyaw_post;


  typedef boost::shared_ptr< ::AutoNav::obs_IMU_RPY_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AutoNav::obs_IMU_RPY_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct obs_IMU_RPY
typedef  ::AutoNav::obs_IMU_RPY_<std::allocator<void> > obs_IMU_RPY;

typedef boost::shared_ptr< ::AutoNav::obs_IMU_RPY> obs_IMU_RPYPtr;
typedef boost::shared_ptr< ::AutoNav::obs_IMU_RPY const> obs_IMU_RPYConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::AutoNav::obs_IMU_RPY_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::AutoNav::obs_IMU_RPY_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace AutoNav

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::AutoNav::obs_IMU_RPY_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::AutoNav::obs_IMU_RPY_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::AutoNav::obs_IMU_RPY_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a9a4538ac5c69253cc8a1aefb110a3fa";
  }

  static const char* value(const  ::AutoNav::obs_IMU_RPY_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa9a4538ac5c69253ULL;
  static const uint64_t static_value2 = 0xcc8a1aefb110a3faULL;
};

template<class ContainerAllocator>
struct DataType< ::AutoNav::obs_IMU_RPY_<ContainerAllocator> > {
  static const char* value() 
  {
    return "AutoNav/obs_IMU_RPY";
  }

  static const char* value(const  ::AutoNav::obs_IMU_RPY_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::AutoNav::obs_IMU_RPY_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 timestamp\n\
uint32 seq\n\
\n\
float32 roll\n\
float32 pitch\n\
\n\
float32 baselineY_IMU\n\
float32 baselineY_Filter\n\
float32 navYaw\n\
float32 observedYaw\n\
\n\
float32 roll_pre\n\
float32 pitch_pre\n\
float32 yaw_pre\n\
float32 dyaw_pre\n\
\n\
float32 roll_post\n\
float32 pitch_post\n\
float32 yaw_post\n\
float32 dyaw_post\n\
";
  }

  static const char* value(const  ::AutoNav::obs_IMU_RPY_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::AutoNav::obs_IMU_RPY_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::AutoNav::obs_IMU_RPY_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.seq);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.baselineY_IMU);
    stream.next(m.baselineY_Filter);
    stream.next(m.navYaw);
    stream.next(m.observedYaw);
    stream.next(m.roll_pre);
    stream.next(m.pitch_pre);
    stream.next(m.yaw_pre);
    stream.next(m.dyaw_pre);
    stream.next(m.roll_post);
    stream.next(m.pitch_post);
    stream.next(m.yaw_post);
    stream.next(m.dyaw_post);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct obs_IMU_RPY_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AutoNav::obs_IMU_RPY_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::AutoNav::obs_IMU_RPY_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "baselineY_IMU: ";
    Printer<float>::stream(s, indent + "  ", v.baselineY_IMU);
    s << indent << "baselineY_Filter: ";
    Printer<float>::stream(s, indent + "  ", v.baselineY_Filter);
    s << indent << "navYaw: ";
    Printer<float>::stream(s, indent + "  ", v.navYaw);
    s << indent << "observedYaw: ";
    Printer<float>::stream(s, indent + "  ", v.observedYaw);
    s << indent << "roll_pre: ";
    Printer<float>::stream(s, indent + "  ", v.roll_pre);
    s << indent << "pitch_pre: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_pre);
    s << indent << "yaw_pre: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_pre);
    s << indent << "dyaw_pre: ";
    Printer<float>::stream(s, indent + "  ", v.dyaw_pre);
    s << indent << "roll_post: ";
    Printer<float>::stream(s, indent + "  ", v.roll_post);
    s << indent << "pitch_post: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_post);
    s << indent << "yaw_post: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_post);
    s << indent << "dyaw_post: ";
    Printer<float>::stream(s, indent + "  ", v.dyaw_post);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAV_MESSAGE_OBS_IMU_RPY_H

