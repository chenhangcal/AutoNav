/* Auto-generated by genmsg_cpp for file /home/dev/ros/stacks/AutoNav/msg/predictInternal.msg */
#ifndef AUTONAV_MESSAGE_PREDICTINTERNAL_H
#define AUTONAV_MESSAGE_PREDICTINTERNAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Twist.h"

namespace AutoNav
{
template <class ContainerAllocator>
struct predictInternal_ {
  typedef predictInternal_<ContainerAllocator> Type;

  predictInternal_()
  : timestamp(0)
  , timeSpanMicros(0)
  , activeControlInfo()
  , useControlGains(0)
  , controlValid(0)
  , rollControlGain(0.0)
  , pitchControlGain(0.0)
  , yawSpeedControlGain(0.0)
  , forceX(0.0)
  , forceY(0.0)
  , vx_gain(0.0)
  , vy_gain(0.0)
  , vz_gain(0.0)
  , roll_pre(0.0)
  , pitch_pre(0.0)
  , yaw_pre(0.0)
  , dyaw_pre(0.0)
  , x_pre(0.0)
  , dx_pre(0.0)
  , y_pre(0.0)
  , dy_pre(0.0)
  , z_pre(0.0)
  , dz_pre(0.0)
  , varx_pre(0.0)
  , vary_pre(0.0)
  , vardx_pre(0.0)
  , vardy_pre(0.0)
  , roll_post(0.0)
  , pitch_post(0.0)
  , yaw_post(0.0)
  , dyaw_post(0.0)
  , x_post(0.0)
  , dx_post(0.0)
  , y_post(0.0)
  , dy_post(0.0)
  , z_post(0.0)
  , dz_post(0.0)
  , varx_post(0.0)
  , vary_post(0.0)
  , vardx_post(0.0)
  , vardy_post(0.0)
  {
  }

  predictInternal_(const ContainerAllocator& _alloc)
  : timestamp(0)
  , timeSpanMicros(0)
  , activeControlInfo(_alloc)
  , useControlGains(0)
  , controlValid(0)
  , rollControlGain(0.0)
  , pitchControlGain(0.0)
  , yawSpeedControlGain(0.0)
  , forceX(0.0)
  , forceY(0.0)
  , vx_gain(0.0)
  , vy_gain(0.0)
  , vz_gain(0.0)
  , roll_pre(0.0)
  , pitch_pre(0.0)
  , yaw_pre(0.0)
  , dyaw_pre(0.0)
  , x_pre(0.0)
  , dx_pre(0.0)
  , y_pre(0.0)
  , dy_pre(0.0)
  , z_pre(0.0)
  , dz_pre(0.0)
  , varx_pre(0.0)
  , vary_pre(0.0)
  , vardx_pre(0.0)
  , vardy_pre(0.0)
  , roll_post(0.0)
  , pitch_post(0.0)
  , yaw_post(0.0)
  , dyaw_post(0.0)
  , x_post(0.0)
  , dx_post(0.0)
  , y_post(0.0)
  , dy_post(0.0)
  , z_post(0.0)
  , dz_post(0.0)
  , varx_post(0.0)
  , vary_post(0.0)
  , vardx_post(0.0)
  , vardy_post(0.0)
  {
  }

  typedef int32_t _timestamp_type;
  int32_t timestamp;

  typedef int32_t _timeSpanMicros_type;
  int32_t timeSpanMicros;

  typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _activeControlInfo_type;
   ::geometry_msgs::Twist_<ContainerAllocator>  activeControlInfo;

  typedef int32_t _useControlGains_type;
  int32_t useControlGains;

  typedef int32_t _controlValid_type;
  int32_t controlValid;

  typedef float _rollControlGain_type;
  float rollControlGain;

  typedef float _pitchControlGain_type;
  float pitchControlGain;

  typedef float _yawSpeedControlGain_type;
  float yawSpeedControlGain;

  typedef float _forceX_type;
  float forceX;

  typedef float _forceY_type;
  float forceY;

  typedef float _vx_gain_type;
  float vx_gain;

  typedef float _vy_gain_type;
  float vy_gain;

  typedef float _vz_gain_type;
  float vz_gain;

  typedef float _roll_pre_type;
  float roll_pre;

  typedef float _pitch_pre_type;
  float pitch_pre;

  typedef float _yaw_pre_type;
  float yaw_pre;

  typedef float _dyaw_pre_type;
  float dyaw_pre;

  typedef float _x_pre_type;
  float x_pre;

  typedef float _dx_pre_type;
  float dx_pre;

  typedef float _y_pre_type;
  float y_pre;

  typedef float _dy_pre_type;
  float dy_pre;

  typedef float _z_pre_type;
  float z_pre;

  typedef float _dz_pre_type;
  float dz_pre;

  typedef float _varx_pre_type;
  float varx_pre;

  typedef float _vary_pre_type;
  float vary_pre;

  typedef float _vardx_pre_type;
  float vardx_pre;

  typedef float _vardy_pre_type;
  float vardy_pre;

  typedef float _roll_post_type;
  float roll_post;

  typedef float _pitch_post_type;
  float pitch_post;

  typedef float _yaw_post_type;
  float yaw_post;

  typedef float _dyaw_post_type;
  float dyaw_post;

  typedef float _x_post_type;
  float x_post;

  typedef float _dx_post_type;
  float dx_post;

  typedef float _y_post_type;
  float y_post;

  typedef float _dy_post_type;
  float dy_post;

  typedef float _z_post_type;
  float z_post;

  typedef float _dz_post_type;
  float dz_post;

  typedef float _varx_post_type;
  float varx_post;

  typedef float _vary_post_type;
  float vary_post;

  typedef float _vardx_post_type;
  float vardx_post;

  typedef float _vardy_post_type;
  float vardy_post;


  typedef boost::shared_ptr< ::AutoNav::predictInternal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AutoNav::predictInternal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct predictInternal
typedef  ::AutoNav::predictInternal_<std::allocator<void> > predictInternal;

typedef boost::shared_ptr< ::AutoNav::predictInternal> predictInternalPtr;
typedef boost::shared_ptr< ::AutoNav::predictInternal const> predictInternalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::AutoNav::predictInternal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::AutoNav::predictInternal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace AutoNav

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::AutoNav::predictInternal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::AutoNav::predictInternal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::AutoNav::predictInternal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ecda137da737bf0c26f0e9aeaeab8110";
  }

  static const char* value(const  ::AutoNav::predictInternal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xecda137da737bf0cULL;
  static const uint64_t static_value2 = 0x26f0e9aeaeab8110ULL;
};

template<class ContainerAllocator>
struct DataType< ::AutoNav::predictInternal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "AutoNav/predictInternal";
  }

  static const char* value(const  ::AutoNav::predictInternal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::AutoNav::predictInternal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#time when message was published\n\
int32 timestamp\n\
\n\
int32 timeSpanMicros\n\
\n\
geometry_msgs/Twist activeControlInfo\n\
\n\
int32 useControlGains\n\
int32 controlValid\n\
\n\
# gains because of given Control Commands\n\
float32 rollControlGain\n\
float32 pitchControlGain\n\
float32 yawSpeedControlGain\n\
\n\
#Forces project on horizontal axes due to tilt\n\
float32 forceX\n\
float32 forceY\n\
\n\
#Velocity gain due to forces on horizontal axes\n\
float32 vx_gain\n\
float32 vy_gain\n\
float32 vz_gain\n\
\n\
#prior state before prediction\n\
float32 roll_pre\n\
float32 pitch_pre\n\
float32 yaw_pre\n\
float32 dyaw_pre\n\
float32 x_pre\n\
float32 dx_pre\n\
float32 y_pre\n\
float32 dy_pre\n\
float32 z_pre\n\
float32 dz_pre\n\
float32 varx_pre\n\
float32 vary_pre\n\
float32 vardx_pre\n\
float32 vardy_pre\n\
\n\
#posterior state after prediction\n\
float32 roll_post\n\
float32 pitch_post\n\
float32 yaw_post\n\
float32 dyaw_post\n\
float32 x_post\n\
float32 dx_post\n\
float32 y_post\n\
float32 dy_post\n\
float32 z_post\n\
float32 dz_post\n\
float32 varx_post\n\
float32 vary_post\n\
float32 vardx_post\n\
float32 vardy_post\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into it's linear and angular parts. \n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::AutoNav::predictInternal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::AutoNav::predictInternal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::AutoNav::predictInternal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.timeSpanMicros);
    stream.next(m.activeControlInfo);
    stream.next(m.useControlGains);
    stream.next(m.controlValid);
    stream.next(m.rollControlGain);
    stream.next(m.pitchControlGain);
    stream.next(m.yawSpeedControlGain);
    stream.next(m.forceX);
    stream.next(m.forceY);
    stream.next(m.vx_gain);
    stream.next(m.vy_gain);
    stream.next(m.vz_gain);
    stream.next(m.roll_pre);
    stream.next(m.pitch_pre);
    stream.next(m.yaw_pre);
    stream.next(m.dyaw_pre);
    stream.next(m.x_pre);
    stream.next(m.dx_pre);
    stream.next(m.y_pre);
    stream.next(m.dy_pre);
    stream.next(m.z_pre);
    stream.next(m.dz_pre);
    stream.next(m.varx_pre);
    stream.next(m.vary_pre);
    stream.next(m.vardx_pre);
    stream.next(m.vardy_pre);
    stream.next(m.roll_post);
    stream.next(m.pitch_post);
    stream.next(m.yaw_post);
    stream.next(m.dyaw_post);
    stream.next(m.x_post);
    stream.next(m.dx_post);
    stream.next(m.y_post);
    stream.next(m.dy_post);
    stream.next(m.z_post);
    stream.next(m.dz_post);
    stream.next(m.varx_post);
    stream.next(m.vary_post);
    stream.next(m.vardx_post);
    stream.next(m.vardy_post);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct predictInternal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AutoNav::predictInternal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::AutoNav::predictInternal_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "timeSpanMicros: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timeSpanMicros);
    s << indent << "activeControlInfo: ";
s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.activeControlInfo);
    s << indent << "useControlGains: ";
    Printer<int32_t>::stream(s, indent + "  ", v.useControlGains);
    s << indent << "controlValid: ";
    Printer<int32_t>::stream(s, indent + "  ", v.controlValid);
    s << indent << "rollControlGain: ";
    Printer<float>::stream(s, indent + "  ", v.rollControlGain);
    s << indent << "pitchControlGain: ";
    Printer<float>::stream(s, indent + "  ", v.pitchControlGain);
    s << indent << "yawSpeedControlGain: ";
    Printer<float>::stream(s, indent + "  ", v.yawSpeedControlGain);
    s << indent << "forceX: ";
    Printer<float>::stream(s, indent + "  ", v.forceX);
    s << indent << "forceY: ";
    Printer<float>::stream(s, indent + "  ", v.forceY);
    s << indent << "vx_gain: ";
    Printer<float>::stream(s, indent + "  ", v.vx_gain);
    s << indent << "vy_gain: ";
    Printer<float>::stream(s, indent + "  ", v.vy_gain);
    s << indent << "vz_gain: ";
    Printer<float>::stream(s, indent + "  ", v.vz_gain);
    s << indent << "roll_pre: ";
    Printer<float>::stream(s, indent + "  ", v.roll_pre);
    s << indent << "pitch_pre: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_pre);
    s << indent << "yaw_pre: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_pre);
    s << indent << "dyaw_pre: ";
    Printer<float>::stream(s, indent + "  ", v.dyaw_pre);
    s << indent << "x_pre: ";
    Printer<float>::stream(s, indent + "  ", v.x_pre);
    s << indent << "dx_pre: ";
    Printer<float>::stream(s, indent + "  ", v.dx_pre);
    s << indent << "y_pre: ";
    Printer<float>::stream(s, indent + "  ", v.y_pre);
    s << indent << "dy_pre: ";
    Printer<float>::stream(s, indent + "  ", v.dy_pre);
    s << indent << "z_pre: ";
    Printer<float>::stream(s, indent + "  ", v.z_pre);
    s << indent << "dz_pre: ";
    Printer<float>::stream(s, indent + "  ", v.dz_pre);
    s << indent << "varx_pre: ";
    Printer<float>::stream(s, indent + "  ", v.varx_pre);
    s << indent << "vary_pre: ";
    Printer<float>::stream(s, indent + "  ", v.vary_pre);
    s << indent << "vardx_pre: ";
    Printer<float>::stream(s, indent + "  ", v.vardx_pre);
    s << indent << "vardy_pre: ";
    Printer<float>::stream(s, indent + "  ", v.vardy_pre);
    s << indent << "roll_post: ";
    Printer<float>::stream(s, indent + "  ", v.roll_post);
    s << indent << "pitch_post: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_post);
    s << indent << "yaw_post: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_post);
    s << indent << "dyaw_post: ";
    Printer<float>::stream(s, indent + "  ", v.dyaw_post);
    s << indent << "x_post: ";
    Printer<float>::stream(s, indent + "  ", v.x_post);
    s << indent << "dx_post: ";
    Printer<float>::stream(s, indent + "  ", v.dx_post);
    s << indent << "y_post: ";
    Printer<float>::stream(s, indent + "  ", v.y_post);
    s << indent << "dy_post: ";
    Printer<float>::stream(s, indent + "  ", v.dy_post);
    s << indent << "z_post: ";
    Printer<float>::stream(s, indent + "  ", v.z_post);
    s << indent << "dz_post: ";
    Printer<float>::stream(s, indent + "  ", v.dz_post);
    s << indent << "varx_post: ";
    Printer<float>::stream(s, indent + "  ", v.varx_post);
    s << indent << "vary_post: ";
    Printer<float>::stream(s, indent + "  ", v.vary_post);
    s << indent << "vardx_post: ";
    Printer<float>::stream(s, indent + "  ", v.vardx_post);
    s << indent << "vardy_post: ";
    Printer<float>::stream(s, indent + "  ", v.vardy_post);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAV_MESSAGE_PREDICTINTERNAL_H

