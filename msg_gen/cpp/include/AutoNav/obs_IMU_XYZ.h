/* Auto-generated by genmsg_cpp for file /home/dev/ros/stacks/AutoNav/msg/obs_IMU_XYZ.msg */
#ifndef AUTONAV_MESSAGE_OBS_IMU_XYZ_H
#define AUTONAV_MESSAGE_OBS_IMU_XYZ_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace AutoNav
{
template <class ContainerAllocator>
struct obs_IMU_XYZ_ {
  typedef obs_IMU_XYZ_<ContainerAllocator> Type;

  obs_IMU_XYZ_()
  : timestamp(0)
  , seq(0)
  , nav_vx(0.0)
  , nav_vy(0.0)
  , global_vx(0.0)
  , global_vy(0.0)
  , x_pre(0.0)
  , y_pre(0.0)
  , z_pre(0.0)
  , varx_pre(0.0)
  , vary_pre(0.0)
  , dx_pre(0.0)
  , dy_pre(0.0)
  , dz_pre(0.0)
  , vardx_pre(0.0)
  , vardy_pre(0.0)
  , x_post(0.0)
  , y_post(0.0)
  , z_post(0.0)
  , varx_post(0.0)
  , vary_post(0.0)
  , dx_post(0.0)
  , dy_post(0.0)
  , dz_post(0.0)
  , vardx_post(0.0)
  , vardy_post(0.0)
  {
  }

  obs_IMU_XYZ_(const ContainerAllocator& _alloc)
  : timestamp(0)
  , seq(0)
  , nav_vx(0.0)
  , nav_vy(0.0)
  , global_vx(0.0)
  , global_vy(0.0)
  , x_pre(0.0)
  , y_pre(0.0)
  , z_pre(0.0)
  , varx_pre(0.0)
  , vary_pre(0.0)
  , dx_pre(0.0)
  , dy_pre(0.0)
  , dz_pre(0.0)
  , vardx_pre(0.0)
  , vardy_pre(0.0)
  , x_post(0.0)
  , y_post(0.0)
  , z_post(0.0)
  , varx_post(0.0)
  , vary_post(0.0)
  , dx_post(0.0)
  , dy_post(0.0)
  , dz_post(0.0)
  , vardx_post(0.0)
  , vardy_post(0.0)
  {
  }

  typedef int32_t _timestamp_type;
  int32_t timestamp;

  typedef uint32_t _seq_type;
  uint32_t seq;

  typedef float _nav_vx_type;
  float nav_vx;

  typedef float _nav_vy_type;
  float nav_vy;

  typedef float _global_vx_type;
  float global_vx;

  typedef float _global_vy_type;
  float global_vy;

  typedef float _x_pre_type;
  float x_pre;

  typedef float _y_pre_type;
  float y_pre;

  typedef float _z_pre_type;
  float z_pre;

  typedef float _varx_pre_type;
  float varx_pre;

  typedef float _vary_pre_type;
  float vary_pre;

  typedef float _dx_pre_type;
  float dx_pre;

  typedef float _dy_pre_type;
  float dy_pre;

  typedef float _dz_pre_type;
  float dz_pre;

  typedef float _vardx_pre_type;
  float vardx_pre;

  typedef float _vardy_pre_type;
  float vardy_pre;

  typedef float _x_post_type;
  float x_post;

  typedef float _y_post_type;
  float y_post;

  typedef float _z_post_type;
  float z_post;

  typedef float _varx_post_type;
  float varx_post;

  typedef float _vary_post_type;
  float vary_post;

  typedef float _dx_post_type;
  float dx_post;

  typedef float _dy_post_type;
  float dy_post;

  typedef float _dz_post_type;
  float dz_post;

  typedef float _vardx_post_type;
  float vardx_post;

  typedef float _vardy_post_type;
  float vardy_post;


  typedef boost::shared_ptr< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct obs_IMU_XYZ
typedef  ::AutoNav::obs_IMU_XYZ_<std::allocator<void> > obs_IMU_XYZ;

typedef boost::shared_ptr< ::AutoNav::obs_IMU_XYZ> obs_IMU_XYZPtr;
typedef boost::shared_ptr< ::AutoNav::obs_IMU_XYZ const> obs_IMU_XYZConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace AutoNav

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a27ecf5c7e457c77d43e22ee523c64b9";
  }

  static const char* value(const  ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa27ecf5c7e457c77ULL;
  static const uint64_t static_value2 = 0xd43e22ee523c64b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> > {
  static const char* value() 
  {
    return "AutoNav/obs_IMU_XYZ";
  }

  static const char* value(const  ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 timestamp\n\
uint32 seq\n\
\n\
float32 nav_vx\n\
float32 nav_vy\n\
\n\
float32 global_vx\n\
float32 global_vy\n\
\n\
float32 x_pre\n\
float32 y_pre\n\
float32 z_pre\n\
float32 varx_pre\n\
float32 vary_pre\n\
\n\
float32 dx_pre\n\
float32 dy_pre\n\
float32 dz_pre\n\
float32 vardx_pre\n\
float32 vardy_pre\n\
\n\
float32 x_post\n\
float32 y_post\n\
float32 z_post\n\
float32 varx_post\n\
float32 vary_post\n\
\n\
float32 dx_post\n\
float32 dy_post\n\
float32 dz_post\n\
float32 vardx_post\n\
float32 vardy_post\n\
";
  }

  static const char* value(const  ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.timestamp);
    stream.next(m.seq);
    stream.next(m.nav_vx);
    stream.next(m.nav_vy);
    stream.next(m.global_vx);
    stream.next(m.global_vy);
    stream.next(m.x_pre);
    stream.next(m.y_pre);
    stream.next(m.z_pre);
    stream.next(m.varx_pre);
    stream.next(m.vary_pre);
    stream.next(m.dx_pre);
    stream.next(m.dy_pre);
    stream.next(m.dz_pre);
    stream.next(m.vardx_pre);
    stream.next(m.vardy_pre);
    stream.next(m.x_post);
    stream.next(m.y_post);
    stream.next(m.z_post);
    stream.next(m.varx_post);
    stream.next(m.vary_post);
    stream.next(m.dx_post);
    stream.next(m.dy_post);
    stream.next(m.dz_post);
    stream.next(m.vardx_post);
    stream.next(m.vardy_post);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct obs_IMU_XYZ_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::AutoNav::obs_IMU_XYZ_<ContainerAllocator> & v) 
  {
    s << indent << "timestamp: ";
    Printer<int32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "nav_vx: ";
    Printer<float>::stream(s, indent + "  ", v.nav_vx);
    s << indent << "nav_vy: ";
    Printer<float>::stream(s, indent + "  ", v.nav_vy);
    s << indent << "global_vx: ";
    Printer<float>::stream(s, indent + "  ", v.global_vx);
    s << indent << "global_vy: ";
    Printer<float>::stream(s, indent + "  ", v.global_vy);
    s << indent << "x_pre: ";
    Printer<float>::stream(s, indent + "  ", v.x_pre);
    s << indent << "y_pre: ";
    Printer<float>::stream(s, indent + "  ", v.y_pre);
    s << indent << "z_pre: ";
    Printer<float>::stream(s, indent + "  ", v.z_pre);
    s << indent << "varx_pre: ";
    Printer<float>::stream(s, indent + "  ", v.varx_pre);
    s << indent << "vary_pre: ";
    Printer<float>::stream(s, indent + "  ", v.vary_pre);
    s << indent << "dx_pre: ";
    Printer<float>::stream(s, indent + "  ", v.dx_pre);
    s << indent << "dy_pre: ";
    Printer<float>::stream(s, indent + "  ", v.dy_pre);
    s << indent << "dz_pre: ";
    Printer<float>::stream(s, indent + "  ", v.dz_pre);
    s << indent << "vardx_pre: ";
    Printer<float>::stream(s, indent + "  ", v.vardx_pre);
    s << indent << "vardy_pre: ";
    Printer<float>::stream(s, indent + "  ", v.vardy_pre);
    s << indent << "x_post: ";
    Printer<float>::stream(s, indent + "  ", v.x_post);
    s << indent << "y_post: ";
    Printer<float>::stream(s, indent + "  ", v.y_post);
    s << indent << "z_post: ";
    Printer<float>::stream(s, indent + "  ", v.z_post);
    s << indent << "varx_post: ";
    Printer<float>::stream(s, indent + "  ", v.varx_post);
    s << indent << "vary_post: ";
    Printer<float>::stream(s, indent + "  ", v.vary_post);
    s << indent << "dx_post: ";
    Printer<float>::stream(s, indent + "  ", v.dx_post);
    s << indent << "dy_post: ";
    Printer<float>::stream(s, indent + "  ", v.dy_post);
    s << indent << "dz_post: ";
    Printer<float>::stream(s, indent + "  ", v.dz_post);
    s << indent << "vardx_post: ";
    Printer<float>::stream(s, indent + "  ", v.vardx_post);
    s << indent << "vardy_post: ";
    Printer<float>::stream(s, indent + "  ", v.vardy_post);
  }
};


} // namespace message_operations
} // namespace ros

#endif // AUTONAV_MESSAGE_OBS_IMU_XYZ_H

