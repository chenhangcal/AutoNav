#include "Teleop.h"
 
Keypress::Keypress(QWidget *parent):QWidget(parent)
{
  myLabel = new QLabel("Label");
  mainLayout = new QVBoxLayout;
  mainLayout->addWidget(myLabel);
  setLayout(mainLayout);
  myLabel->setText("Reading from the keyboard  and Publishing to Twist!\n"
		   "---------------------------\n"
		   "Takeoff/Land: q/a \n\n"
		   "Moving around (Roll and Pitch):\n"
		   "    i\n"
		   "  j   l\n"
		   "    k\n"
		   "Throttle (Height) and Yaw (Direction):\n"
		   "    w\n"
		   "  u   o\n"
		   "    s\n"
		   "Press f to flat trim\n"
		   "Press t to toggle state\n"
		   "Press 1/2 to increase/decrease linear speeds by 10% \n"
		   "Press 3/4 to increase/decrease angular speeds by 10% \n"
		   "anything else : stop\n"
		   "\nESC to quit\n");

  for(int i=0;i<8;i++)
    isPressed[i] = false;

  speed = 1.0;
  turn = 1.0;
  velCount = 0;
}

Keypress::~Keypress()
{

}
void Keypress::keyPressEvent(QKeyEvent *key)
{
  int idx = mapKey(key->key());

  if(idx >= 0)
    {
      bool changed = !isPressed[idx];

      isPressed[idx] = true;

      if(changed)
	publishCommand(calcKBControl());
    }
  else if(key->key() == 81) //q
    {
      ROS_INFO("Takeoff!");
      sendTakeOff();
    }
  else if(key->key() == 65) //a
    {
      sendLand();
      ROS_INFO("Land!");
    }
  else if(key->key() == 70) //f
    {
      sendFlatTrim();
      ROS_INFO("Flat Trim!");
    }
  else if(key->key() == 84) //t
    {
      sendToggleState();
      ROS_INFO("Reset State!");
    }
  else if(key->key() == 49) //1
    {
      speed *= 1.1;
      speed = std::max(0.0,std::min(speed,1.0));
      ROS_INFO("Speed is %lf",speed);
    }
  else if(key->key() == 50) //2
    {
      speed *= 0.9;
      speed = std::max(0.0,std::min(speed,1.0));
      ROS_INFO("Speed is %lf",speed);
    }
  else if(key->key() == 51) //3
    {
      turn *= 1.1;
      turn = std::max(0.0,std::min(turn,1.0));
      ROS_INFO("Turn is %lf",turn);
    }
  else if(key->key() == 52) //4
    {
      turn *= 0.9;
      turn = std::max(0.0,std::min(turn,1.0));
      ROS_INFO("Turn is %lf",turn);
    }
}

void Keypress::keyReleaseEvent(QKeyEvent *key)
{

  int idx = mapKey(key->key());

  if(idx >= 0)
    {
      bool changed = false;

      if(!key->isAutoRepeat())
	{
	  changed = isPressed[idx];
	  isPressed[idx] = false;
	}

      if(changed)
	publishCommand(calcKBControl());
    }
}

int Keypress::mapKey(int k)
{
  switch(k)
    {
    case 74: // j
      return 0;
    case 76: // l  
      return 1;
    case 73: // i
      return 2;
    case 75: // k
      return 3;
    case 85: // u
      return 4;
    case 79: // o
      return 5;
    case 87: // w
      return 6;
    case 83: // s
      return 7;
    }
  return -1;
}

void Keypress::sendTakeOff()
{
  takeoff_pub.publish(std_msgs::Empty());
}

void Keypress::sendLand()
{
  land_pub.publish(std_msgs::Empty());
}

void Keypress::sendToggleState()
{
  toggleState_pub.publish(std_msgs::Empty());
}

void Keypress::sendFlatTrim()
{
  flattrim_srv.call(flattrim_srv_empty);
}

void Keypress::publishCommand(geometry_msgs::Twist cmd)
{
  vel_pub.publish(cmd);
}

void Keypress::velCB(const geometry_msgs::TwistConstPtr cmd)
{
  velCount++;
}

geometry_msgs::Twist Keypress::calcKBControl()
{
  geometry_msgs::Twist cmd;

  if(isPressed[0]) //j
    cmd.linear.y = speed;
  if(isPressed[1]) //l
    cmd.linear.y = -speed;
  if(isPressed[2]) //i
    cmd.linear.x = speed;
  if(isPressed[3]) //k
    cmd.linear.x = -speed;
  if(isPressed[4]) //u
    cmd.angular.z = turn;
  if(isPressed[5]) //o
    cmd.angular.z = -turn;
  if(isPressed[6]) //w
    cmd.linear.z = speed;
  if(isPressed[7]) //s
    cmd.linear.z = -speed;

  return cmd;
}

void Keypress::run()
{
  vel_pub = n.advertise<geometry_msgs::Twist>("/cmd_vel",1);
  takeoff_pub = n.advertise<std_msgs::Empty>("/ardrone/takeoff",1);
  land_pub = n.advertise<std_msgs::Empty>("/ardrone/land",1);
  toggleState_pub = n.advertise<std_msgs::Empty>("/ardrone/reset",1);

  vel_sub = n.subscribe("/cmd_vel",5,&Keypress::velCB,this);
  flattrim_srv = n.serviceClient<std_srvs::Empty>("/ardrone/flattrim",1);
  
  ros::Duration(1.5).sleep();
  ros::Rate r(20);

  sendFlatTrim();

  while(n.ok())
    {
      ROS_INFO("VelCount = %d",velCount);
      r.sleep();
    }
}

int main(int argc, char **argv)
{  
  ros::init(argc,argv,"UI");

  QApplication app(argc, argv);  
  
  Keypress box;  
  box.show();  

  ros::Duration(1).sleep();

  box.run();

  return app.exec();    
}  
