"""autogenerated by genpy from AutoNav/predictUpTo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class predictUpTo(genpy.Message):
  _md5sum = "dd021969d994e39ff43a715cb3a3d6ed"
  _type = "AutoNav/predictUpTo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 timestamp
uint32 seq_rpy
uint32 seq_xyz

geometry_msgs/Twist controlInfo

float32 roll
float32 pitch
float32 yaw

float32 vx
float32 vy
float32 altd
================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into it's linear and angular parts. 
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['timestamp','seq_rpy','seq_xyz','controlInfo','roll','pitch','yaw','vx','vy','altd']
  _slot_types = ['int32','uint32','uint32','geometry_msgs/Twist','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,seq_rpy,seq_xyz,controlInfo,roll,pitch,yaw,vx,vy,altd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(predictUpTo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.seq_rpy is None:
        self.seq_rpy = 0
      if self.seq_xyz is None:
        self.seq_xyz = 0
      if self.controlInfo is None:
        self.controlInfo = geometry_msgs.msg.Twist()
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.vx is None:
        self.vx = 0.
      if self.vy is None:
        self.vy = 0.
      if self.altd is None:
        self.altd = 0.
    else:
      self.timestamp = 0
      self.seq_rpy = 0
      self.seq_xyz = 0
      self.controlInfo = geometry_msgs.msg.Twist()
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.vx = 0.
      self.vy = 0.
      self.altd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i2I6d6f.pack(_x.timestamp, _x.seq_rpy, _x.seq_xyz, _x.controlInfo.linear.x, _x.controlInfo.linear.y, _x.controlInfo.linear.z, _x.controlInfo.angular.x, _x.controlInfo.angular.y, _x.controlInfo.angular.z, _x.roll, _x.pitch, _x.yaw, _x.vx, _x.vy, _x.altd))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.controlInfo is None:
        self.controlInfo = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.timestamp, _x.seq_rpy, _x.seq_xyz, _x.controlInfo.linear.x, _x.controlInfo.linear.y, _x.controlInfo.linear.z, _x.controlInfo.angular.x, _x.controlInfo.angular.y, _x.controlInfo.angular.z, _x.roll, _x.pitch, _x.yaw, _x.vx, _x.vy, _x.altd,) = _struct_i2I6d6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i2I6d6f.pack(_x.timestamp, _x.seq_rpy, _x.seq_xyz, _x.controlInfo.linear.x, _x.controlInfo.linear.y, _x.controlInfo.linear.z, _x.controlInfo.angular.x, _x.controlInfo.angular.y, _x.controlInfo.angular.z, _x.roll, _x.pitch, _x.yaw, _x.vx, _x.vy, _x.altd))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.controlInfo is None:
        self.controlInfo = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
      end += 84
      (_x.timestamp, _x.seq_rpy, _x.seq_xyz, _x.controlInfo.linear.x, _x.controlInfo.linear.y, _x.controlInfo.linear.z, _x.controlInfo.angular.x, _x.controlInfo.angular.y, _x.controlInfo.angular.z, _x.roll, _x.pitch, _x.yaw, _x.vx, _x.vy, _x.altd,) = _struct_i2I6d6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i2I6d6f = struct.Struct("<i2I6d6f")
