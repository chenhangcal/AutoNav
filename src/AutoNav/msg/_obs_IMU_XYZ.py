"""autogenerated by genpy from AutoNav/obs_IMU_XYZ.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class obs_IMU_XYZ(genpy.Message):
  _md5sum = "a27ecf5c7e457c77d43e22ee523c64b9"
  _type = "AutoNav/obs_IMU_XYZ"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 timestamp
uint32 seq

float32 nav_vx
float32 nav_vy

float32 global_vx
float32 global_vy

float32 x_pre
float32 y_pre
float32 z_pre
float32 varx_pre
float32 vary_pre

float32 dx_pre
float32 dy_pre
float32 dz_pre
float32 vardx_pre
float32 vardy_pre

float32 x_post
float32 y_post
float32 z_post
float32 varx_post
float32 vary_post

float32 dx_post
float32 dy_post
float32 dz_post
float32 vardx_post
float32 vardy_post
"""
  __slots__ = ['timestamp','seq','nav_vx','nav_vy','global_vx','global_vy','x_pre','y_pre','z_pre','varx_pre','vary_pre','dx_pre','dy_pre','dz_pre','vardx_pre','vardy_pre','x_post','y_post','z_post','varx_post','vary_post','dx_post','dy_post','dz_post','vardx_post','vardy_post']
  _slot_types = ['int32','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,seq,nav_vx,nav_vy,global_vx,global_vy,x_pre,y_pre,z_pre,varx_pre,vary_pre,dx_pre,dy_pre,dz_pre,vardx_pre,vardy_pre,x_post,y_post,z_post,varx_post,vary_post,dx_post,dy_post,dz_post,vardx_post,vardy_post

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(obs_IMU_XYZ, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.seq is None:
        self.seq = 0
      if self.nav_vx is None:
        self.nav_vx = 0.
      if self.nav_vy is None:
        self.nav_vy = 0.
      if self.global_vx is None:
        self.global_vx = 0.
      if self.global_vy is None:
        self.global_vy = 0.
      if self.x_pre is None:
        self.x_pre = 0.
      if self.y_pre is None:
        self.y_pre = 0.
      if self.z_pre is None:
        self.z_pre = 0.
      if self.varx_pre is None:
        self.varx_pre = 0.
      if self.vary_pre is None:
        self.vary_pre = 0.
      if self.dx_pre is None:
        self.dx_pre = 0.
      if self.dy_pre is None:
        self.dy_pre = 0.
      if self.dz_pre is None:
        self.dz_pre = 0.
      if self.vardx_pre is None:
        self.vardx_pre = 0.
      if self.vardy_pre is None:
        self.vardy_pre = 0.
      if self.x_post is None:
        self.x_post = 0.
      if self.y_post is None:
        self.y_post = 0.
      if self.z_post is None:
        self.z_post = 0.
      if self.varx_post is None:
        self.varx_post = 0.
      if self.vary_post is None:
        self.vary_post = 0.
      if self.dx_post is None:
        self.dx_post = 0.
      if self.dy_post is None:
        self.dy_post = 0.
      if self.dz_post is None:
        self.dz_post = 0.
      if self.vardx_post is None:
        self.vardx_post = 0.
      if self.vardy_post is None:
        self.vardy_post = 0.
    else:
      self.timestamp = 0
      self.seq = 0
      self.nav_vx = 0.
      self.nav_vy = 0.
      self.global_vx = 0.
      self.global_vy = 0.
      self.x_pre = 0.
      self.y_pre = 0.
      self.z_pre = 0.
      self.varx_pre = 0.
      self.vary_pre = 0.
      self.dx_pre = 0.
      self.dy_pre = 0.
      self.dz_pre = 0.
      self.vardx_pre = 0.
      self.vardy_pre = 0.
      self.x_post = 0.
      self.y_post = 0.
      self.z_post = 0.
      self.varx_post = 0.
      self.vary_post = 0.
      self.dx_post = 0.
      self.dy_post = 0.
      self.dz_post = 0.
      self.vardx_post = 0.
      self.vardy_post = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_iI24f.pack(_x.timestamp, _x.seq, _x.nav_vx, _x.nav_vy, _x.global_vx, _x.global_vy, _x.x_pre, _x.y_pre, _x.z_pre, _x.varx_pre, _x.vary_pre, _x.dx_pre, _x.dy_pre, _x.dz_pre, _x.vardx_pre, _x.vardy_pre, _x.x_post, _x.y_post, _x.z_post, _x.varx_post, _x.vary_post, _x.dx_post, _x.dy_post, _x.dz_post, _x.vardx_post, _x.vardy_post))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.timestamp, _x.seq, _x.nav_vx, _x.nav_vy, _x.global_vx, _x.global_vy, _x.x_pre, _x.y_pre, _x.z_pre, _x.varx_pre, _x.vary_pre, _x.dx_pre, _x.dy_pre, _x.dz_pre, _x.vardx_pre, _x.vardy_pre, _x.x_post, _x.y_post, _x.z_post, _x.varx_post, _x.vary_post, _x.dx_post, _x.dy_post, _x.dz_post, _x.vardx_post, _x.vardy_post,) = _struct_iI24f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_iI24f.pack(_x.timestamp, _x.seq, _x.nav_vx, _x.nav_vy, _x.global_vx, _x.global_vy, _x.x_pre, _x.y_pre, _x.z_pre, _x.varx_pre, _x.vary_pre, _x.dx_pre, _x.dy_pre, _x.dz_pre, _x.vardx_pre, _x.vardy_pre, _x.x_post, _x.y_post, _x.z_post, _x.varx_post, _x.vary_post, _x.dx_post, _x.dy_post, _x.dz_post, _x.vardx_post, _x.vardy_post))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 104
      (_x.timestamp, _x.seq, _x.nav_vx, _x.nav_vy, _x.global_vx, _x.global_vy, _x.x_pre, _x.y_pre, _x.z_pre, _x.varx_pre, _x.vary_pre, _x.dx_pre, _x.dy_pre, _x.dz_pre, _x.vardx_pre, _x.vardy_pre, _x.x_post, _x.y_post, _x.z_post, _x.varx_post, _x.vary_post, _x.dx_post, _x.dy_post, _x.dz_post, _x.vardx_post, _x.vardy_post,) = _struct_iI24f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_iI24f = struct.Struct("<iI24f")
