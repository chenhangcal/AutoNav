"""autogenerated by genpy from AutoNav/control_commands.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control_commands(genpy.Message):
  _md5sum = "89daaa5cf29061dcd0b2da457fee8393"
  _type = "AutoNav/control_commands"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 error_x
float32 error_y
float32 error_z
float32 error_yaw

float32 d_error_x
float32 d_error_y
float32 d_error_z
float32 d_error_yaw

float32 proj_error_x
float32 proj_error_y

float32 pterm_x
float32 pterm_y
float32 pterm_z
float32 pterm_yaw

float32 dterm_x
float32 dterm_y
float32 dterm_z
float32 dterm_yaw

float32 vel_x
float32 vel_y
float32 vel_z
float32 vel_yaw
"""
  __slots__ = ['error_x','error_y','error_z','error_yaw','d_error_x','d_error_y','d_error_z','d_error_yaw','proj_error_x','proj_error_y','pterm_x','pterm_y','pterm_z','pterm_yaw','dterm_x','dterm_y','dterm_z','dterm_yaw','vel_x','vel_y','vel_z','vel_yaw']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       error_x,error_y,error_z,error_yaw,d_error_x,d_error_y,d_error_z,d_error_yaw,proj_error_x,proj_error_y,pterm_x,pterm_y,pterm_z,pterm_yaw,dterm_x,dterm_y,dterm_z,dterm_yaw,vel_x,vel_y,vel_z,vel_yaw

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control_commands, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error_x is None:
        self.error_x = 0.
      if self.error_y is None:
        self.error_y = 0.
      if self.error_z is None:
        self.error_z = 0.
      if self.error_yaw is None:
        self.error_yaw = 0.
      if self.d_error_x is None:
        self.d_error_x = 0.
      if self.d_error_y is None:
        self.d_error_y = 0.
      if self.d_error_z is None:
        self.d_error_z = 0.
      if self.d_error_yaw is None:
        self.d_error_yaw = 0.
      if self.proj_error_x is None:
        self.proj_error_x = 0.
      if self.proj_error_y is None:
        self.proj_error_y = 0.
      if self.pterm_x is None:
        self.pterm_x = 0.
      if self.pterm_y is None:
        self.pterm_y = 0.
      if self.pterm_z is None:
        self.pterm_z = 0.
      if self.pterm_yaw is None:
        self.pterm_yaw = 0.
      if self.dterm_x is None:
        self.dterm_x = 0.
      if self.dterm_y is None:
        self.dterm_y = 0.
      if self.dterm_z is None:
        self.dterm_z = 0.
      if self.dterm_yaw is None:
        self.dterm_yaw = 0.
      if self.vel_x is None:
        self.vel_x = 0.
      if self.vel_y is None:
        self.vel_y = 0.
      if self.vel_z is None:
        self.vel_z = 0.
      if self.vel_yaw is None:
        self.vel_yaw = 0.
    else:
      self.error_x = 0.
      self.error_y = 0.
      self.error_z = 0.
      self.error_yaw = 0.
      self.d_error_x = 0.
      self.d_error_y = 0.
      self.d_error_z = 0.
      self.d_error_yaw = 0.
      self.proj_error_x = 0.
      self.proj_error_y = 0.
      self.pterm_x = 0.
      self.pterm_y = 0.
      self.pterm_z = 0.
      self.pterm_yaw = 0.
      self.dterm_x = 0.
      self.dterm_y = 0.
      self.dterm_z = 0.
      self.dterm_yaw = 0.
      self.vel_x = 0.
      self.vel_y = 0.
      self.vel_z = 0.
      self.vel_yaw = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_22f.pack(_x.error_x, _x.error_y, _x.error_z, _x.error_yaw, _x.d_error_x, _x.d_error_y, _x.d_error_z, _x.d_error_yaw, _x.proj_error_x, _x.proj_error_y, _x.pterm_x, _x.pterm_y, _x.pterm_z, _x.pterm_yaw, _x.dterm_x, _x.dterm_y, _x.dterm_z, _x.dterm_yaw, _x.vel_x, _x.vel_y, _x.vel_z, _x.vel_yaw))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.error_x, _x.error_y, _x.error_z, _x.error_yaw, _x.d_error_x, _x.d_error_y, _x.d_error_z, _x.d_error_yaw, _x.proj_error_x, _x.proj_error_y, _x.pterm_x, _x.pterm_y, _x.pterm_z, _x.pterm_yaw, _x.dterm_x, _x.dterm_y, _x.dterm_z, _x.dterm_yaw, _x.vel_x, _x.vel_y, _x.vel_z, _x.vel_yaw,) = _struct_22f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_22f.pack(_x.error_x, _x.error_y, _x.error_z, _x.error_yaw, _x.d_error_x, _x.d_error_y, _x.d_error_z, _x.d_error_yaw, _x.proj_error_x, _x.proj_error_y, _x.pterm_x, _x.pterm_y, _x.pterm_z, _x.pterm_yaw, _x.dterm_x, _x.dterm_y, _x.dterm_z, _x.dterm_yaw, _x.vel_x, _x.vel_y, _x.vel_z, _x.vel_yaw))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 88
      (_x.error_x, _x.error_y, _x.error_z, _x.error_yaw, _x.d_error_x, _x.d_error_y, _x.d_error_z, _x.d_error_yaw, _x.proj_error_x, _x.proj_error_y, _x.pterm_x, _x.pterm_y, _x.pterm_z, _x.pterm_yaw, _x.dterm_x, _x.dterm_y, _x.dterm_z, _x.dterm_yaw, _x.vel_x, _x.vel_y, _x.vel_z, _x.vel_yaw,) = _struct_22f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_22f = struct.Struct("<22f")
