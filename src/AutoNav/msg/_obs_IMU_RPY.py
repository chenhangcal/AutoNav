"""autogenerated by genpy from AutoNav/obs_IMU_RPY.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class obs_IMU_RPY(genpy.Message):
  _md5sum = "7ae7f845d6e8d3c6c5352d8860c40cdd"
  _type = "AutoNav/obs_IMU_RPY"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 timestamp
uint32 seq

float32 roll
float32 pitch
float32 yaw

float32 roll_pre
float32 pitch_pre
float32 yaw_pre
float32 dyaw_pre

float32 roll_post
float32 pitch_post
float32 yaw_post
float32 dyaw_post
"""
  __slots__ = ['timestamp','seq','roll','pitch','yaw','roll_pre','pitch_pre','yaw_pre','dyaw_pre','roll_post','pitch_post','yaw_post','dyaw_post']
  _slot_types = ['int32','uint32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timestamp,seq,roll,pitch,yaw,roll_pre,pitch_pre,yaw_pre,dyaw_pre,roll_post,pitch_post,yaw_post,dyaw_post

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(obs_IMU_RPY, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.timestamp is None:
        self.timestamp = 0
      if self.seq is None:
        self.seq = 0
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.roll_pre is None:
        self.roll_pre = 0.
      if self.pitch_pre is None:
        self.pitch_pre = 0.
      if self.yaw_pre is None:
        self.yaw_pre = 0.
      if self.dyaw_pre is None:
        self.dyaw_pre = 0.
      if self.roll_post is None:
        self.roll_post = 0.
      if self.pitch_post is None:
        self.pitch_post = 0.
      if self.yaw_post is None:
        self.yaw_post = 0.
      if self.dyaw_post is None:
        self.dyaw_post = 0.
    else:
      self.timestamp = 0
      self.seq = 0
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.roll_pre = 0.
      self.pitch_pre = 0.
      self.yaw_pre = 0.
      self.dyaw_pre = 0.
      self.roll_post = 0.
      self.pitch_post = 0.
      self.yaw_post = 0.
      self.dyaw_post = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_iI11f.pack(_x.timestamp, _x.seq, _x.roll, _x.pitch, _x.yaw, _x.roll_pre, _x.pitch_pre, _x.yaw_pre, _x.dyaw_pre, _x.roll_post, _x.pitch_post, _x.yaw_post, _x.dyaw_post))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.timestamp, _x.seq, _x.roll, _x.pitch, _x.yaw, _x.roll_pre, _x.pitch_pre, _x.yaw_pre, _x.dyaw_pre, _x.roll_post, _x.pitch_post, _x.yaw_post, _x.dyaw_post,) = _struct_iI11f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_iI11f.pack(_x.timestamp, _x.seq, _x.roll, _x.pitch, _x.yaw, _x.roll_pre, _x.pitch_pre, _x.yaw_pre, _x.dyaw_pre, _x.roll_post, _x.pitch_post, _x.yaw_post, _x.dyaw_post))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.timestamp, _x.seq, _x.roll, _x.pitch, _x.yaw, _x.roll_pre, _x.pitch_pre, _x.yaw_pre, _x.dyaw_pre, _x.roll_post, _x.pitch_post, _x.yaw_post, _x.dyaw_post,) = _struct_iI11f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_iI11f = struct.Struct("<iI11f")
